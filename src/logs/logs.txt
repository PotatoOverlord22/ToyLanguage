ProgramState 7 :
Execution Stack: 
{int counter;{Reference(int) a;while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
int counter
{Reference(int) a;while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
int counter
{Reference(int) a;while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{Reference(int) a;while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}}
SymbolTable: 
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{Reference(int) a;while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}}
SymbolTable: 
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
Reference(int) a
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
Reference(int) a
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 8 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 8 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
FileTable: 
Heap: 


ProgramState 8 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 9 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
FileTable: 
Heap: 


ProgramState 9 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
FileTable: 
Heap: 


ProgramState 9 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
FileTable: 
Heap: 


ProgramState 9 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
FileTable: 
Heap: 


ProgramState 9 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 0
Output: 
FileTable: 
Heap: 
1 => 0


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
FileTable: 
Heap: 


ProgramState 9 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 0
Output: 
FileTable: 
Heap: 
1 => 0


ProgramState 7 :
Execution Stack: 
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
FileTable: 
Heap: 


ProgramState 9 :
Execution Stack: 
SymbolTable: 
a => (1, int)
counter => 0
Output: 
0
FileTable: 
Heap: 
1 => 0


ProgramState 10 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
FileTable: 
Heap: 


ProgramState 10 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
FileTable: 
Heap: 


ProgramState 10 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
FileTable: 
Heap: 


ProgramState 11 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
FileTable: 
Heap: 


ProgramState 11 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
FileTable: 
Heap: 


ProgramState 11 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
FileTable: 
Heap: 


ProgramState 11 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
FileTable: 
Heap: 


ProgramState 11 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 2
Output: 
0
FileTable: 
Heap: 
1 => 2


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
FileTable: 
Heap: 


ProgramState 11 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 2
Output: 
0
FileTable: 
Heap: 
1 => 2


ProgramState 7 :
Execution Stack: 
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
2
FileTable: 
Heap: 


ProgramState 11 :
Execution Stack: 
SymbolTable: 
a => (1, int)
counter => 2
Output: 
0
2
FileTable: 
Heap: 
1 => 2


ProgramState 12 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
2
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
2
FileTable: 
Heap: 


ProgramState 12 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
2
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
2
FileTable: 
Heap: 


ProgramState 12 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
2
FileTable: 
Heap: 


ProgramState 13 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
2
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
2
FileTable: 
Heap: 


ProgramState 13 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
2
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
2
FileTable: 
Heap: 


ProgramState 13 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
2
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
2
FileTable: 
Heap: 


ProgramState 13 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
2
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
2
FileTable: 
Heap: 


ProgramState 13 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 4
Output: 
0
2
FileTable: 
Heap: 
1 => 4


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
2
FileTable: 
Heap: 


ProgramState 13 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 4
Output: 
0
2
FileTable: 
Heap: 
1 => 4


ProgramState 7 :
Execution Stack: 
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
2
4
FileTable: 
Heap: 


ProgramState 13 :
Execution Stack: 
SymbolTable: 
a => (1, int)
counter => 4
Output: 
0
2
4
FileTable: 
Heap: 
1 => 4


ProgramState 14 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
2
4
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
2
4
FileTable: 
Heap: 


ProgramState 14 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
2
4
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
2
4
FileTable: 
Heap: 


ProgramState 14 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
2
4
FileTable: 
Heap: 


ProgramState 15 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
2
4
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
2
4
FileTable: 
Heap: 


ProgramState 15 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
2
4
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
2
4
FileTable: 
Heap: 


ProgramState 15 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
2
4
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
2
4
FileTable: 
Heap: 


ProgramState 15 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
2
4
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
2
4
FileTable: 
Heap: 


ProgramState 15 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 6
Output: 
0
2
4
FileTable: 
Heap: 
1 => 6


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
2
4
FileTable: 
Heap: 


ProgramState 15 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 6
Output: 
0
2
4
FileTable: 
Heap: 
1 => 6


ProgramState 7 :
Execution Stack: 
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
2
4
6
FileTable: 
Heap: 


ProgramState 15 :
Execution Stack: 
SymbolTable: 
a => (1, int)
counter => 6
Output: 
0
2
4
6
FileTable: 
Heap: 
1 => 6


ProgramState 16 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
2
4
6
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 2
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
2
4
6
FileTable: 
Heap: 


ProgramState 16 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
2
4
6
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 10
Output: 
0
2
4
6
FileTable: 
Heap: 


ProgramState 16 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
2
4
6
FileTable: 
Heap: 


ProgramState 17 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
2
4
6
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 2}
SymbolTable: 
a => (0, int)
counter => 10
Output: 
0
2
4
6
FileTable: 
Heap: 


ProgramState 17 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
2
4
6
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 10
Output: 
0
2
4
6
FileTable: 
Heap: 


ProgramState 17 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
2
4
6
FileTable: 
Heap: 


ProgramState 17 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
2
4
6
FileTable: 
Heap: 


ProgramState 17 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 8
Output: 
0
2
4
6
FileTable: 
Heap: 
1 => 8


ProgramState 17 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 8
Output: 
0
2
4
6
FileTable: 
Heap: 
1 => 8


ProgramState 17 :
Execution Stack: 
SymbolTable: 
a => (1, int)
counter => 8
Output: 
0
2
4
6
8
FileTable: 
Heap: 
1 => 8


ProgramState 7 :
Execution Stack: 
{int counter;{Reference(int) a;while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
int counter
{Reference(int) a;while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
int counter
{Reference(int) a;while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{Reference(int) a;while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}}
SymbolTable: 
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{Reference(int) a;while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}}
SymbolTable: 
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
Reference(int) a
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
Reference(int) a
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 8 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 8 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 1
Output: 
FileTable: 
Heap: 


ProgramState 8 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 9 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 1
Output: 
FileTable: 
Heap: 


ProgramState 9 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 1
Output: 
FileTable: 
Heap: 


ProgramState 9 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 1
Output: 
FileTable: 
Heap: 


ProgramState 9 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 0
Output: 
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 1
Output: 
FileTable: 
Heap: 


ProgramState 9 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 0
Output: 
FileTable: 
Heap: 
1 => 0


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 1
Output: 
FileTable: 
Heap: 


ProgramState 9 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 0
Output: 
FileTable: 
Heap: 
1 => 0


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 1
Output: 
0
FileTable: 
Heap: 


ProgramState 9 :
Execution Stack: 
SymbolTable: 
a => (1, int)
counter => 0
Output: 
0
FileTable: 
Heap: 
1 => 0


ProgramState 10 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 1
Output: 
0
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 1
Output: 
0
FileTable: 
Heap: 


ProgramState 10 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 1
Output: 
0
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
FileTable: 
Heap: 


ProgramState 10 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 1
Output: 
0
FileTable: 
Heap: 


ProgramState 11 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 1
Output: 
0
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
FileTable: 
Heap: 


ProgramState 11 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 1
Output: 
0
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
FileTable: 
Heap: 


ProgramState 11 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 1
Output: 
0
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
FileTable: 
Heap: 


ProgramState 11 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 1
Output: 
0
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
FileTable: 
Heap: 


ProgramState 11 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 1
Output: 
0
FileTable: 
Heap: 
1 => 1


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
FileTable: 
Heap: 


ProgramState 11 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 1
Output: 
0
FileTable: 
Heap: 
1 => 1


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
1
FileTable: 
Heap: 


ProgramState 11 :
Execution Stack: 
SymbolTable: 
a => (1, int)
counter => 1
Output: 
0
1
FileTable: 
Heap: 
1 => 1


ProgramState 12 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
1
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
1
FileTable: 
Heap: 


ProgramState 12 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
1
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 3
Output: 
0
1
FileTable: 
Heap: 


ProgramState 12 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
1
FileTable: 
Heap: 


ProgramState 13 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
1
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 3
Output: 
0
1
FileTable: 
Heap: 


ProgramState 13 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
1
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 3
Output: 
0
1
FileTable: 
Heap: 


ProgramState 13 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
1
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 3
Output: 
0
1
FileTable: 
Heap: 


ProgramState 13 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 2
Output: 
0
1
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 3
Output: 
0
1
FileTable: 
Heap: 


ProgramState 13 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 2
Output: 
0
1
FileTable: 
Heap: 
1 => 2


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 3
Output: 
0
1
FileTable: 
Heap: 


ProgramState 13 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 2
Output: 
0
1
FileTable: 
Heap: 
1 => 2


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 3
Output: 
0
1
2
FileTable: 
Heap: 


ProgramState 13 :
Execution Stack: 
SymbolTable: 
a => (1, int)
counter => 2
Output: 
0
1
2
FileTable: 
Heap: 
1 => 2


ProgramState 14 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 3
Output: 
0
1
2
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 3
Output: 
0
1
2
FileTable: 
Heap: 


ProgramState 14 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 3
Output: 
0
1
2
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
1
2
FileTable: 
Heap: 


ProgramState 14 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 3
Output: 
0
1
2
FileTable: 
Heap: 


ProgramState 15 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 3
Output: 
0
1
2
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
1
2
FileTable: 
Heap: 


ProgramState 15 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 3
Output: 
0
1
2
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
1
2
FileTable: 
Heap: 


ProgramState 15 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 3
Output: 
0
1
2
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
1
2
FileTable: 
Heap: 


ProgramState 15 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 3
Output: 
0
1
2
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
1
2
FileTable: 
Heap: 


ProgramState 15 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 3
Output: 
0
1
2
FileTable: 
Heap: 
1 => 3


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
1
2
FileTable: 
Heap: 


ProgramState 15 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 3
Output: 
0
1
2
FileTable: 
Heap: 
1 => 3


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
1
2
3
FileTable: 
Heap: 


ProgramState 15 :
Execution Stack: 
SymbolTable: 
a => (1, int)
counter => 3
Output: 
0
1
2
3
FileTable: 
Heap: 
1 => 3


ProgramState 16 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
1
2
3
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
1
2
3
FileTable: 
Heap: 


ProgramState 16 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
1
2
3
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 5
Output: 
0
1
2
3
FileTable: 
Heap: 


ProgramState 16 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
1
2
3
FileTable: 
Heap: 


ProgramState 17 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
1
2
3
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 5
Output: 
0
1
2
3
FileTable: 
Heap: 


ProgramState 17 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
1
2
3
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 5
Output: 
0
1
2
3
FileTable: 
Heap: 


ProgramState 17 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
1
2
3
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 5
Output: 
0
1
2
3
FileTable: 
Heap: 


ProgramState 17 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 4
Output: 
0
1
2
3
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 5
Output: 
0
1
2
3
FileTable: 
Heap: 


ProgramState 17 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 4
Output: 
0
1
2
3
FileTable: 
Heap: 
1 => 4


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 5
Output: 
0
1
2
3
FileTable: 
Heap: 


ProgramState 17 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 4
Output: 
0
1
2
3
FileTable: 
Heap: 
1 => 4


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 5
Output: 
0
1
2
3
4
FileTable: 
Heap: 


ProgramState 17 :
Execution Stack: 
SymbolTable: 
a => (1, int)
counter => 4
Output: 
0
1
2
3
4
FileTable: 
Heap: 
1 => 4


ProgramState 18 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 5
Output: 
0
1
2
3
4
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 5
Output: 
0
1
2
3
4
FileTable: 
Heap: 


ProgramState 18 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 5
Output: 
0
1
2
3
4
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
1
2
3
4
FileTable: 
Heap: 


ProgramState 18 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 5
Output: 
0
1
2
3
4
FileTable: 
Heap: 


ProgramState 19 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 5
Output: 
0
1
2
3
4
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
1
2
3
4
FileTable: 
Heap: 


ProgramState 19 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 5
Output: 
0
1
2
3
4
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
1
2
3
4
FileTable: 
Heap: 


ProgramState 19 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 5
Output: 
0
1
2
3
4
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
1
2
3
4
FileTable: 
Heap: 


ProgramState 19 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 5
Output: 
0
1
2
3
4
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
1
2
3
4
FileTable: 
Heap: 


ProgramState 19 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 5
Output: 
0
1
2
3
4
FileTable: 
Heap: 
1 => 5


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
1
2
3
4
FileTable: 
Heap: 


ProgramState 19 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 5
Output: 
0
1
2
3
4
FileTable: 
Heap: 
1 => 5


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 


ProgramState 19 :
Execution Stack: 
SymbolTable: 
a => (1, int)
counter => 5
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 
1 => 5


ProgramState 20 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 


ProgramState 20 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 7
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 


ProgramState 20 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 


ProgramState 21 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 7
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 


ProgramState 21 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 7
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 


ProgramState 21 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 7
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 


ProgramState 21 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 6
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 7
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 


ProgramState 21 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 6
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 
1 => 6


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 7
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 


ProgramState 21 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 6
Output: 
0
1
2
3
4
5
FileTable: 
Heap: 
1 => 6


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 7
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 


ProgramState 21 :
Execution Stack: 
SymbolTable: 
a => (1, int)
counter => 6
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 
1 => 6


ProgramState 22 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 7
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 7
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 


ProgramState 22 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 7
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 


ProgramState 22 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 7
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 


ProgramState 23 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 7
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 


ProgramState 23 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 7
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 


ProgramState 23 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 7
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 


ProgramState 23 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 7
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 


ProgramState 23 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 7
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 
1 => 7


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 


ProgramState 23 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 7
Output: 
0
1
2
3
4
5
6
FileTable: 
Heap: 
1 => 7


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 


ProgramState 23 :
Execution Stack: 
SymbolTable: 
a => (1, int)
counter => 7
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 
1 => 7


ProgramState 24 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 


ProgramState 24 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 


ProgramState 24 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 


ProgramState 25 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 


ProgramState 25 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 


ProgramState 25 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
{fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 


ProgramState 25 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 8
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 


ProgramState 25 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 8
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 
1 => 8


ProgramState 7 :
Execution Stack: 
fork(fork({new(a, counter);print(heapRead(a))}))
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 


ProgramState 25 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 8
Output: 
0
1
2
3
4
5
6
7
FileTable: 
Heap: 
1 => 8


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
8
FileTable: 
Heap: 


ProgramState 25 :
Execution Stack: 
SymbolTable: 
a => (1, int)
counter => 8
Output: 
0
1
2
3
4
5
6
7
8
FileTable: 
Heap: 
1 => 8


ProgramState 26 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
8
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
counter=counter + 1
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
8
FileTable: 
Heap: 


ProgramState 26 :
Execution Stack: 
fork({new(a, counter);print(heapRead(a))})
SymbolTable: 
a => (0, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
8
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 10
Output: 
0
1
2
3
4
5
6
7
8
FileTable: 
Heap: 


ProgramState 26 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
8
FileTable: 
Heap: 


ProgramState 27 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
8
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
while(counter < 10) {fork(fork({new(a, counter);print(heapRead(a))}));counter=counter + 1}
SymbolTable: 
a => (0, int)
counter => 10
Output: 
0
1
2
3
4
5
6
7
8
FileTable: 
Heap: 


ProgramState 27 :
Execution Stack: 
{new(a, counter);print(heapRead(a))}
SymbolTable: 
a => (0, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
8
FileTable: 
Heap: 


ProgramState 7 :
Execution Stack: 
SymbolTable: 
a => (0, int)
counter => 10
Output: 
0
1
2
3
4
5
6
7
8
FileTable: 
Heap: 


ProgramState 27 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
8
FileTable: 
Heap: 


ProgramState 27 :
Execution Stack: 
new(a, counter)
print(heapRead(a))
SymbolTable: 
a => (0, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
8
FileTable: 
Heap: 


ProgramState 27 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
8
FileTable: 
Heap: 
1 => 9


ProgramState 27 :
Execution Stack: 
print(heapRead(a))
SymbolTable: 
a => (1, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
8
FileTable: 
Heap: 
1 => 9


ProgramState 27 :
Execution Stack: 
SymbolTable: 
a => (1, int)
counter => 9
Output: 
0
1
2
3
4
5
6
7
8
9
FileTable: 
Heap: 
1 => 9


