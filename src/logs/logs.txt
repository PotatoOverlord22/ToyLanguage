ProgramState:
Execution Stack: 
{Reference(int) v;{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
Reference(int) v
{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
Reference(int) v
{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}}
SymbolTable: 
v => (0, int)
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}}
SymbolTable: 
v => (0, int)
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
new(v, 20)
{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}
SymbolTable: 
v => (0, int)
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
new(v, 20)
{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}
SymbolTable: 
v => (0, int)
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}
SymbolTable: 
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}
SymbolTable: 
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
Reference(Reference(int)) a
{new(a, v);{print(a);print(v)}}
SymbolTable: 
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
Reference(Reference(int)) a
{new(a, v);{print(a);print(v)}}
SymbolTable: 
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
{new(a, v);{print(a);print(v)}}
SymbolTable: 
a => (0, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
{new(a, v);{print(a);print(v)}}
SymbolTable: 
a => (0, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
new(a, v)
{print(a);print(v)}
SymbolTable: 
a => (0, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
new(a, v)
{print(a);print(v)}
SymbolTable: 
a => (0, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
{print(a);print(v)}
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
{print(a);print(v)}
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
print(a)
print(v)
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
print(a)
print(v)
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
print(v)
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
(2, Reference(int))
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
print(v)
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
(2, Reference(int))
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
(2, Reference(int))
(1, int)
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
(2, Reference(int))
(1, int)
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
{Reference(int) v;{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
Reference(int) v
{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
Reference(int) v
{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}}
SymbolTable: 
v => (0, int)
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}}
SymbolTable: 
v => (0, int)
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
new(v, 20)
{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}
SymbolTable: 
v => (0, int)
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
new(v, 20)
{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}
SymbolTable: 
v => (0, int)
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}
SymbolTable: 
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}
SymbolTable: 
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
Reference(Reference(int)) a
{new(a, v);{print(a);print(v)}}
SymbolTable: 
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
Reference(Reference(int)) a
{new(a, v);{print(a);print(v)}}
SymbolTable: 
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
{new(a, v);{print(a);print(v)}}
SymbolTable: 
a => (0, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
{new(a, v);{print(a);print(v)}}
SymbolTable: 
a => (0, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
new(a, v)
{print(a);print(v)}
SymbolTable: 
a => (0, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
new(a, v)
{print(a);print(v)}
SymbolTable: 
a => (0, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
{print(a);print(v)}
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
{print(a);print(v)}
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
print(a)
print(v)
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
print(a)
print(v)
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
print(v)
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
(2, Reference(int))
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
print(v)
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
(2, Reference(int))
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
(2, Reference(int))
(1, int)
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
(2, Reference(int))
(1, int)
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
{Reference(int) v;{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
Reference(int) v
{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
Reference(int) v
{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}}
SymbolTable: 
v => (0, int)
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}}
SymbolTable: 
v => (0, int)
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
new(v, 20)
{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}
SymbolTable: 
v => (0, int)
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
new(v, 20)
{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}
SymbolTable: 
v => (0, int)
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}
SymbolTable: 
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
{Reference(Reference(int)) a;{new(a, v);{print(a);print(v)}}}
SymbolTable: 
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
Reference(Reference(int)) a
{new(a, v);{print(a);print(v)}}
SymbolTable: 
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
Reference(Reference(int)) a
{new(a, v);{print(a);print(v)}}
SymbolTable: 
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
{new(a, v);{print(a);print(v)}}
SymbolTable: 
a => (0, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
{new(a, v);{print(a);print(v)}}
SymbolTable: 
a => (0, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
new(a, v)
{print(a);print(v)}
SymbolTable: 
a => (0, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
new(a, v)
{print(a);print(v)}
SymbolTable: 
a => (0, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
{print(a);print(v)}
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
{print(a);print(v)}
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
print(a)
print(v)
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
print(a)
print(v)
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
print(v)
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
(2, Reference(int))
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
print(v)
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
(2, Reference(int))
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
(2, Reference(int))
(1, int)
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
(2, Reference(int))
(1, int)
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
{Reference(int) v;{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}}}}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
Reference(int) v
{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}}}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
Reference(int) v
{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}}}}
SymbolTable: 
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}}}}
SymbolTable: 
v => (0, int)
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
{new(v, 20);{Reference(Reference(int)) a;{new(a, v);{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}}}}
SymbolTable: 
v => (0, int)
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
new(v, 20)
{Reference(Reference(int)) a;{new(a, v);{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}}}
SymbolTable: 
v => (0, int)
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
new(v, 20)
{Reference(Reference(int)) a;{new(a, v);{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}}}
SymbolTable: 
v => (0, int)
Output: 
FileTable: 
Heap: 


ProgramState:
Execution Stack: 
{Reference(Reference(int)) a;{new(a, v);{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}}}
SymbolTable: 
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
{Reference(Reference(int)) a;{new(a, v);{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}}}
SymbolTable: 
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
Reference(Reference(int)) a
{new(a, v);{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}}
SymbolTable: 
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
Reference(Reference(int)) a
{new(a, v);{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}}
SymbolTable: 
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
{new(a, v);{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}}
SymbolTable: 
a => (0, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
{new(a, v);{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}}
SymbolTable: 
a => (0, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
new(a, v)
{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}
SymbolTable: 
a => (0, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
new(a, v)
{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}
SymbolTable: 
a => (0, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20


ProgramState:
Execution Stack: 
{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
{new(v, 30);{print(heapRead(heapRead(a)));new(v, 90)}}
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
new(v, 30)
{print(heapRead(heapRead(a)));new(v, 90)}
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
new(v, 30)
{print(heapRead(heapRead(a)));new(v, 90)}
SymbolTable: 
a => (2, Reference(int))
v => (1, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)


ProgramState:
Execution Stack: 
{print(heapRead(heapRead(a)));new(v, 90)}
SymbolTable: 
a => (2, Reference(int))
v => (3, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)
3 => 30


ProgramState:
Execution Stack: 
{print(heapRead(heapRead(a)));new(v, 90)}
SymbolTable: 
a => (2, Reference(int))
v => (3, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)
3 => 30


ProgramState:
Execution Stack: 
print(heapRead(heapRead(a)))
new(v, 90)
SymbolTable: 
a => (2, Reference(int))
v => (3, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)
3 => 30


ProgramState:
Execution Stack: 
print(heapRead(heapRead(a)))
new(v, 90)
SymbolTable: 
a => (2, Reference(int))
v => (3, int)
Output: 
FileTable: 
Heap: 
1 => 20
2 => (1, int)
3 => 30


ProgramState:
Execution Stack: 
new(v, 90)
SymbolTable: 
a => (2, Reference(int))
v => (3, int)
Output: 
20
FileTable: 
Heap: 
1 => 20
2 => (1, int)
3 => 30


ProgramState:
Execution Stack: 
new(v, 90)
SymbolTable: 
a => (2, Reference(int))
v => (3, int)
Output: 
20
FileTable: 
Heap: 
1 => 20
2 => (1, int)
3 => 30


ProgramState:
Execution Stack: 
SymbolTable: 
a => (2, Reference(int))
v => (4, int)
Output: 
20
FileTable: 
Heap: 
1 => 20
2 => (1, int)
3 => 30
4 => 90


ProgramState:
Execution Stack: 
SymbolTable: 
a => (2, Reference(int))
v => (4, int)
Output: 
20
FileTable: 
Heap: 
1 => 20
2 => (1, int)
4 => 90


